<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ops on Wonyoung&#39;s Tech Blog</title>
    <link>https://wonyoungseo.github.io/categories/ops/</link>
    <description>Recent content in Ops on Wonyoung&#39;s Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Wonyoung Seo 2023</copyright>
    <lastBuildDate>Tue, 05 Mar 2024 01:44:13 +0900</lastBuildDate><atom:link href="https://wonyoungseo.github.io/categories/ops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes - NameSpace</title>
      <link>https://wonyoungseo.github.io/posts/2024-03-05-k8s-namespace/</link>
      <pubDate>Tue, 05 Mar 2024 01:44:13 +0900</pubDate>
      
      <guid>https://wonyoungseo.github.io/posts/2024-03-05-k8s-namespace/</guid>
      <description>Namespace  Namespace 는 쿠버네티스 내 존재하는 가상의 공간 클러스터 내에서 오브젝트들과 리소스 그룹을 &amp;ldquo;논리적&amp;quot;으로 분리함. (물리적 분리가 아님) 작은 규모의 클러스터에서는 그냥 default에서 작업하면 되지만, 엔터프라이즈나 프로덕션 환경에서는 Namespace를 사용하는 것이 좋음  적용 예시  사용자에 따라 Namespace 접근 권한을 다르게 부여할 수 있음. Namespace마다 다른 정책을 부여할 수 있음. Namespace 별로 리소스 할당량(resource quota)을 지정/정의할 수 있음  Namespace의 유형 Default Namespace  Cluster가 처음 생성될 때 K8s가 default로 생성함 프로덕션 클러스터의 경우 Default Namespace를 사용하지 않고, 다른 Namespace를 만드는 것이 권장됨.</description>
    </item>
    
    <item>
      <title>Kubernetes - PV &amp; PVC</title>
      <link>https://wonyoungseo.github.io/posts/2024-02-29-k8s-pv-pvc/</link>
      <pubDate>Thu, 29 Feb 2024 03:18:50 +0900</pubDate>
      
      <guid>https://wonyoungseo.github.io/posts/2024-02-29-k8s-pv-pvc/</guid>
      <description>K8s PV / PVC 기본 개념 데이터를 영구적으로 저장하는 매커니즘 Persistent Storage
1. 주요 개념 PV (Persistent Volume)  K8s Object 클러스터의 스토리지역할을 하는 클러스터 리소스의 일종 관리자가 프로비저닝하거나 Storage Class를 통해 동적으로 프로비저닝 됨 일반 볼륨과의 차이점  일반 볼륨은 Pod와 같은 라이프사이클을 가짐. 함께 생성되고 함께 내려간다는 뜻 PV는 Pod와 별개의 라이프사이클을 가지므로, Pod가 종료되어도 PV에 기록된 데이터는 삭제되지 않음    PVC (Persistent Volume Claim)  K8s Object PVC는 PV 라는 리소스에 대한 요청 + 리소스에 대한 클레임 검사 역할 PVC를 명시하면 쿠버네티스는 적정한 크기와 접근 모드의 PV를 찾고 PVC를 PV에 할당함.</description>
    </item>
    
    <item>
      <title>Kubernetes - Network, Service</title>
      <link>https://wonyoungseo.github.io/posts/2024-01-25-k8s-trial-network-service/</link>
      <pubDate>Thu, 25 Jan 2024 14:17:49 +0900</pubDate>
      
      <guid>https://wonyoungseo.github.io/posts/2024-01-25-k8s-trial-network-service/</guid>
      <description>Network Single Node 상황  쿠버네티스에서는 내부 IP 주소가 Pod에 할당됨. 쿠버네티스 클러스터는 처음 설정될 때, internal private network 를 생성함  모든 pods는 이 네트워크의 레인지 내에서 IP를 부여받음   Pod가 재생성될 때는 또 새로운 IP를 부여받음  따라서, Pod에 부여된 IP로 접근하는 것은 적절한 방법이 아님    Multiple Nodes in a Cluster 상황  각 Node 의 IP는 다르지만, 각 노드 내 Pod의 네트워크가 같을 수 있음 하지만,  모든 Container / Pod는 NAT 없이도 서로 networking 가능 모든 Node는 NAT 없이도 서로 networking 가능   따라서 IP conflict 을 피하기 위한 조치가 필요함 pre-built solution 존재하기도 함  cisco big cloud fabric flannel vmware nsx calico cilium … etc     Service   helps connecting applications together with other applications OR userss ex)  backend server frontend application external datasource etc …    Service 개념  Service는 Kubernetes를 기반으로 하는 어플리케이션 내외의 통신과 접근을 위한 obejct Service 유형  Node Port service  node의 port 에서부터 listen(응답대기) → request 를 pod로 전달하는 역할   Cluster IP  클러스터 내 virtual IP를 생성하여 제각기 다른 service들 간의 통신을 가능케 함.</description>
    </item>
    
    <item>
      <title>Kubernetes - Pod, ReplicaSet, Deployment</title>
      <link>https://wonyoungseo.github.io/posts/2024-01-18-k8s-trial-pod-replica-deployment/</link>
      <pubDate>Thu, 18 Jan 2024 15:12:01 +0900</pubDate>
      
      <guid>https://wonyoungseo.github.io/posts/2024-01-18-k8s-trial-pod-replica-deployment/</guid>
      <description>Pod Pod 뿐만 아니라 쿠버네티스에서 object을 정의하는 yaml의 형태는 다음과 같다.
# pod-definition.yml apiVersion: kind: metadata: spec: containers: - name: # - before the name indicates, its first item in the list image: Pod 관련 명령어
kubectl create -f [FILE NAME].yml
kubectl create -f [FILE NAME].yml --record 또는 kubectl apply -f [FILE NAME].yml
kubectl get pods
kubectl describe pod [POD NAME]
ReplicaSet Replication Controllers (OLD)  High Availability  레플리카 Pod instance를 생성하고 관리함 Pod가 하나인 상황에서도, 만약 죽으면 새로 다시 올리는 역할을 함   Load Balancing &amp;amp; Scaling  multiple pod , multiple node 상황에서도 관리    Replication controller 예시</description>
    </item>
    
    <item>
      <title>Kubernetes - 개념 정리</title>
      <link>https://wonyoungseo.github.io/posts/2024-01-15-k8s-concept/</link>
      <pubDate>Mon, 15 Jan 2024 21:33:01 +0900</pubDate>
      
      <guid>https://wonyoungseo.github.io/posts/2024-01-15-k8s-concept/</guid>
      <description>1 쿠버네티스 개념 아키텍처 1.1. 개념  컨테이너화 된 어플리케이션의 배포, 확장, 운영을 자동화하기 위한 오픈소스 시스템 구글에 의해 개발됨. CNCF에 기반을 둠  1.2. 주요 특징  자동화된 롤아웃 및 롤백  어플리케이션 업데이트 시 롤아웃을 자동으로 관리 문제 발생 시 이전 버전으로 롤백   서비스 접근 및 로드 밸런싱  클러스터 내의 어플리케이션에 쉬벡 접근 트래픽을 자동으로 분산   스케일링  리소스의 사용에 따라 자동 또는 수동으로 스케일링   자체 회복  실패한 컨테이너 재시작.</description>
    </item>
    
  </channel>
</rss>
