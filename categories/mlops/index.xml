<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MLOps on Wonyoung&#39;s Tech Blog</title>
    <link>https://wonyoungseo.github.io/categories/mlops/</link>
    <description>Recent content in MLOps on Wonyoung&#39;s Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Wonyoung Seo 2023</copyright>
    <lastBuildDate>Mon, 15 Jan 2024 14:17:49 +0900</lastBuildDate><atom:link href="https://wonyoungseo.github.io/categories/mlops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes - Network, Service</title>
      <link>https://wonyoungseo.github.io/posts/2024-01-31-k8s-trial-network-service/</link>
      <pubDate>Mon, 15 Jan 2024 14:17:49 +0900</pubDate>
      
      <guid>https://wonyoungseo.github.io/posts/2024-01-31-k8s-trial-network-service/</guid>
      <description>Network Single Node 상황  쿠버네티스에서는 내부 IP 주소가 Pod에 할당됨. 쿠버네티스 클러스터는 처음 설정될 때, internal private network 를 생성함  모든 pods는 이 네트워크의 레인지 내에서 IP를 부여받음   Pod가 재생성될 때는 또 새로운 IP를 부여받음  따라서, Pod에 부여된 IP로 접근하는 것은 적절한 방법이 아님    Multiple Nodes in a Cluster 상황  각 Node 의 IP는 다르지만, 각 노드 내 Pod의 네트워크가 같을 수 있음 하지만,  모든 Container / Pod는 NAT 없이도 서로 networking 가능 모든 Node는 NAT 없이도 서로 networking 가능   따라서 IP conflict 을 피하기 위한 조치가 필요함 pre-built solution 존재하기도 함  cisco big cloud fabric flannel vmware nsx calico cilium … etc     Service   helps connecting applications together with other applications OR userss ex)  backend server frontend application external datasource etc …    Service 개념  Service는 Kubernetes를 기반으로 하는 어플리케이션 내외의 통신과 접근을 위한 obejct Service 유형  Node Port service  node의 port 에서부터 listen(응답대기) → request 를 pod로 전달하는 역할   Cluster IP  클러스터 내 virtual IP를 생성하여 제각기 다른 service들 간의 통신을 가능케 함.</description>
    </item>
    
    <item>
      <title>[KR] Feature Store 의 개념</title>
      <link>https://wonyoungseo.github.io/posts/2023-03-26-introduction-feature-store/</link>
      <pubDate>Sun, 26 Mar 2023 22:44:57 +0900</pubDate>
      
      <guid>https://wonyoungseo.github.io/posts/2023-03-26-introduction-feature-store/</guid>
      <description>MLOps 시스템에서 Feature Store는 빠지지 않는 구성 요소 중 하나이다. 하지만 여타 다른 구성요소들과는 달리 한번에 이해가 잘 되지 않아, 이번 기회에 개념을 정리해본다.
Feature Store는 무엇인가? Feature Store는 머신러닝 모델 또는 데이터사이언스 프로젝트에 사용되는 Feature를 저장, 관리, 제공하는 중앙저장소 역할을 수행하기 위해 등장한 개념이다. Feature Store가 있음으로서 여러가지 모델에 사용되는 반복적인 Feature Engineering 작업을 줄이고, Feature들을 관리하고 추적할 수 있다.
Feature Store는 왜 필요한가? 개인적으로 처음에는 잘 와닿지 않았다. 아마도 실무를 하던 각각의 ML엔지니어, 데이터사이언티스트들이 각자 담당하던 모델의 실험과 서비스의 PoC 단계의 업무만 해와서 그럴 수도 있었다.</description>
    </item>
    
    <item>
      <title>[KR] ML Version Control 의 개념</title>
      <link>https://wonyoungseo.github.io/posts/2022-09-04-introduction-data-version-control/</link>
      <pubDate>Sun, 04 Sep 2022 22:47:00 +0900</pubDate>
      
      <guid>https://wonyoungseo.github.io/posts/2022-09-04-introduction-data-version-control/</guid>
      <description>사내에서 데이터 버전 관리에 대한 내용을 소개하면서 정리한 내용을 포스팅으로 재정리 해보았습니다.
1. 버전관리 1.1. 소프트웨어 엔지니어링에서 관점에서의 버전 관리 이제는 Git으로 익숙하게 접하는 버전 관리(version control)이 하는 역할을 소프트웨어 엔지니어링 관점에서 다시 한번 정리해보자면 다음과 같다.
 소프트웨어를 이루는 코드와 패키지, 라이브러리 등에 생긴 변화를 추적하고 관리하기 위한 용도 여러 구성원이 소프트웨어를 개발할 때 발생하는 혼란을 줄이고, 효율적으로 협업할 수 있게 하는 용도 소프트웨어에 큰 문제가 발생했을 때, 빠르게 이전 버전으로 돌아가는 등, 에러나 실수로 인해 발생하는 손해를 최소화 하기 위한 용도  1.</description>
    </item>
    
    <item>
      <title>[KR] Udacity Nanodegree: Machine Learning DevOps Engineer 후기</title>
      <link>https://wonyoungseo.github.io/posts/2022-08-07-udacity-nanodegree-ml-devops-engineer-review/</link>
      <pubDate>Sun, 07 Aug 2022 13:49:32 +0900</pubDate>
      
      <guid>https://wonyoungseo.github.io/posts/2022-08-07-udacity-nanodegree-ml-devops-engineer-review/</guid>
      <description>Udacity의 MLOps 프로그램    Udacity의 MLOps 관련 강의인 Machine Learning DevOps Engineer Nanodegree를 최근에 수료했다. 수강료 할인과 좋은 기회가 있어 수강하기 시작했는데, 중간에 사정이 있어 잠시 수강을 멈췄다가 최근에야 프로젝트를 완료하면서 수료할 수 있게 되었다. MLOps에 관심이 많은 분들은 해당 강의에 대해 궁금하실 것 같아, 강의 컨텐츠와 후기를 정리해보고자 한다.
강의 컨텐츠 이 강의는 MLOps에 대한 기초를 다루고 있는 만큼, 파이썬은 물론이고 데이터사이언스와 머신러닝 프로젝트에서 자주 사용하는 라이브러리인 Pandas, Numpy, Scikit-Learn 등이 익숙한 사람들을 대상으로 한다.</description>
    </item>
    
    <item>
      <title>[KR] 머신러닝 추론 시스템 패턴</title>
      <link>https://wonyoungseo.github.io/posts/2022-07-22-inference-system-pattern/</link>
      <pubDate>Fri, 22 Jul 2022 21:10:24 +0900</pubDate>
      
      <guid>https://wonyoungseo.github.io/posts/2022-07-22-inference-system-pattern/</guid>
      <description>0. 머신러닝 추론 시스템이란 최근 머신러닝 모델을 서비스하기 위한 파이프라인을 구축하는 프로젝트를 진행하게 되었다. 경험 없이 밑바닥에서부터 시작하는 입장이었기 때문에 프로젝트를 본격적으로 진행하기에 앞서 여러가지 케이스를 분석하고 참고하는 시간을 가져보았다. 그 과정의 일환으로, 이번 글에서는 머신러닝 파이프라인의 한 부분을 담당하는 추론 시스템(ML inference system)에 대해 간단히 정리해보았다.
머신러닝 추론 시스템은 학습된 머신러닝 모델을 불러와 실제 데이터에 대한 추론 결과를 사용자에게 제공하는 기능을 한다. 추론시스템은 누군가가 실제로 머신러닝 모델 프로덕트를 사용한다. 따라서, 머신러닝에서 우리가 익숙한 [데이터수집 -&amp;gt; 데이터정제 -&amp;gt; 모델링 -&amp;gt; 학습 -&amp;gt; 성능평가 -&amp;gt; 실험반복]의 패턴과는 확연히 다르며, 다양한 관점에서 고려해야할 부분들이 생긴다.</description>
    </item>
    
    <item>
      <title>[KR] 머신러닝 파이프라인 개념 정리</title>
      <link>https://wonyoungseo.github.io/posts/2022-06-12-intro-ml-pipeline/</link>
      <pubDate>Sun, 12 Jun 2022 08:34:26 +0900</pubDate>
      
      <guid>https://wonyoungseo.github.io/posts/2022-06-12-intro-ml-pipeline/</guid>
      <description>어떠한 일련의 작업들을 순서대로 묶어 위험요소나 외부의 개입을 최소화하고 자동으로 실행하고자 할 때 파이프라인을 구축한다.
파이프라인의 개념이 적용되지 않은 머신러닝 프로젝트는 결과물을 얻기 위한 과정의 자동화와 재사용성이 확보되지 않기 때문에 일회성 PoC에 그칠 가능성이 높다.
머신러닝 파이프라인이라는 개념은 머신러닝 모델을 학습하고, 재사용하며, 필요한 자원들을 관리하고 배포하는 일련의 과정을 표준화하고 자동으로 동작할 수 있도록 하기 위해 논의 되기 시작했다.
DAG 파이프라인은 대개 DAG(Directed acyclic graph: 방향성 비순환 그래프)의 형태를 띄고 있다. 이름에서 알 수 있듯이, DAG는 방향을 가지되, 루프는 존재하지 않아, 그래프의 시작과 종료가 이루어지는 시점이 명확하기에 파이프라인을 구성하는데 적절한 구조이다.</description>
    </item>
    
    <item>
      <title>[KR] MLOps: 무엇인가?</title>
      <link>https://wonyoungseo.github.io/posts/2021-09-26-what-is-mlops/</link>
      <pubDate>Sun, 26 Sep 2021 11:35:10 +0900</pubDate>
      
      <guid>https://wonyoungseo.github.io/posts/2021-09-26-what-is-mlops/</guid>
      <description>Machine Learning Operations(MLOps)에 대한 주제로 공부하며 기초를 정리해보았습니다.
1. ML VS Real-world ML 1.1. 학술, 연구, 대회, 개인 프로젝트에서의 머신러닝 프로젝트 일반적으로 머신러닝 프로젝트를 시작하거나 학술적인 연구를 하는 경우, 머신러닝 프로젝트는 아래와 같은 성향을 띄고 있음.
   source: Udacity
   해결하고자 하는 문제의 정의와 데이터셋이 주어져 있음. 프로젝트의 목적은 주어진 데이터셋을 기반으로 평가 메트릭에서 모델의 성능이 가장 높게 나오는 모델링을 실행하는 것 프로젝트 진행 동안 만족할만한 모델 성능이 나올 때까지 일련의 과정을 사이클로 반복함  데이터셋에 대한 탐구 여러가지 피쳐 엔지니어링 테크닉 적용 여러가지 하이퍼파라미터 조절 여러가지 머신러닝 알고리즘의 적용    1.</description>
    </item>
    
    <item>
      <title>Kubeflow - 개념 정리</title>
      <link>https://wonyoungseo.github.io/posts/2024-02-11-kubeflow-concept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wonyoungseo.github.io/posts/2024-02-11-kubeflow-concept/</guid>
      <description>KubeFlow  쿠버네티스 기반 ML 워크플로우를 구축, 실행, 관리하기 위한 오픈소스 플랫폼 모델 개발과 배포를 위한 E2E 솔루션 제공 확장성과 유연성을 가지고, 다양한 머신러닝 프레임워크 통합 가능  기능적 특징
 Distributed Training Pipeline Model Serving Model Management Jupyter Notebook Integration Metadata Store  활용 예시
 분산모델 트레이닝  대규모 데이터셋을 다루는 복잡한 머신러닝 모델을 분산환경에서 트레이닝   모델 서빙 및 배포  학습된 모델을 쿠버네티스 클러스터에 배포 효율적 리소스 관리 스케일링 통해 모델 서빙 최적화    1.</description>
    </item>
    
  </channel>
</rss>
