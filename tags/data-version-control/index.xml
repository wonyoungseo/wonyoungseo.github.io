<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data version control on WY&#39;s Tech Blog</title>
    <link>https://lucaseo.github.io/tags/data-version-control/</link>
    <description>Recent content in data version control on WY&#39;s Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Wonyoung Seo 2021</copyright>
    <lastBuildDate>Sun, 04 Sep 2022 22:47:00 +0900</lastBuildDate><atom:link href="https://lucaseo.github.io/tags/data-version-control/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[KR] ML Version Control 의 개념</title>
      <link>https://lucaseo.github.io/posts/2022-09-04-introduction-data-version-control/</link>
      <pubDate>Sun, 04 Sep 2022 22:47:00 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2022-09-04-introduction-data-version-control/</guid>
      <description>사내에서 데이터 버전 관리에 대한 내용을 소개하면서 정리한 내용을 포스팅으로 재정리 해보았습니다.
1. 버전관리 1.1. 소프트웨어 엔지니어링에서 관점에서의 버전 관리 이제는 Git으로 익숙하게 접하는 버전 관리(version control)이 하는 역할을 소프트웨어 엔지니어링 관점에서 다시 한번 정리해보자면 다음과 같다.
 소프트웨어를 이루는 코드와 패키지, 라이브러리 등에 생긴 변화를 추적하고 관리하기 위한 용도 여러 구성원이 소프트웨어를 개발할 때 발생하는 혼란을 줄이고, 효율적으로 협업할 수 있게 하는 용도 소프트웨어에 큰 문제가 발생했을 때, 빠르게 이전 버전으로 돌아가는 등, 에러나 실수로 인해 발생하는 손해를 최소화 하기 위한 용도  1.</description>
    </item>
    
  </channel>
</rss>
